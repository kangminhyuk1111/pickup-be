name: Spring Boot 자동 빌드 및 배포

on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  spring-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Cache 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 접근 권한 설정
        run: chmod +x gradlew

      - name: Gradle 세팅
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
        with:
          cache-read-only: false

      - name: .env 파일 생성
        run: echo "${{ secrets.ENV_FILE }}" > src/main/resources/.env

      - name: 빌드 환경 변수 설정 및 JAR 파일 생성
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JPA_DDL_AUTO: ${{ secrets.JPA_DDL_AUTO }}
          JPA_SHOW_SQL: ${{ secrets.JPA_SHOW_SQL }}
          JPA_FORMAT_SQL: ${{ secrets.JPA_FORMAT_SQL }}
          THYMELEAF_CACHE: ${{ secrets.THYMELEAF_CACHE }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          HIBERNATE_LOG_LEVEL: ${{ secrets.HIBERNATE_LOG_LEVEL }}
          HIBERNATE_BINDING_LOG_LEVEL: ${{ secrets.HIBERNATE_BINDING_LOG_LEVEL }}
          GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
          GITHUB_REDIRECT_URI: ${{ secrets.GITHUB_REDIRECT_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRE_LENGTH: ${{ secrets.JWT_EXPIRE_LENGTH }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          CSRF_ENABLED: ${{ secrets.CSRF_ENABLED }}
          GRADLE_OPTS: -Xmx4g -XX:+UseParallelGC
        run: |
          ./gradlew build \
            --build-cache \
            --parallel \
            --no-daemon

      - name: EC2에 JAR 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "build/libs/shop-0.0.1-SNAPSHOT.jar"
          target: "/home/ubuntu/action/"

      - name: EC2에서 JAR 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/action/build/libs
            echo "🔁 기존 프로세스 종료 시도..."
            pkill -f 'shop-0.0.1-SNAPSHOT.jar' || echo "기존 프로세스 없음 - 무시하고 계속"
            echo "🚀 JAR 백그라운드 실행"
            nohup java -jar shop-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
            echo $! > app.pid
            echo "✅ 실행 완료, PID 저장됨"