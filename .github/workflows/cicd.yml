name: Spring Boot 자동 빌드 및 배포

# main, develop 브랜치 push시 스크립트 실행
on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  spring-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Cache 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 접근 권한 설정
        run: chmod +x gradlew

      - name: Gradle 세팅
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
        with:
          cache-read-only: false

      - name: 빌드 환경 변수 설정 및 JAR 파일 생성
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JPA_DDL_AUTO: ${{ secrets.JPA_DDL_AUTO }}
          JPA_SHOW_SQL: ${{ secrets.JPA_SHOW_SQL }}
          JPA_FORMAT_SQL: ${{ secrets.JPA_FORMAT_SQL }}
          THYMELEAF_CACHE: ${{ secrets.THYMELEAF_CACHE }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          HIBERNATE_LOG_LEVEL: ${{ secrets.HIBERNATE_LOG_LEVEL }}
          HIBERNATE_BINDING_LOG_LEVEL: ${{ secrets.HIBERNATE_BINDING_LOG_LEVEL }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          OAUTH_GITHUB_REDIRECT_URI: ${{ secrets.OAUTH_GITHUB_REDIRECT_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRE_LENGTH: ${{ secrets.JWT_EXPIRE_LENGTH }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          CSRF_ENABLED: ${{ secrets.CSRF_ENABLED }}
          GRADLE_OPTS: -Xmx4g -XX:+UseParallelGC
        run: |
          ./gradlew build \
            --build-cache \
            --parallel \
            --no-daemon

      - name: EC2에 JAR 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu/"
          strip_components: 2

      - name: EC2에서 애플리케이션 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 기존 프로세스 종료 (있다면)
            sudo pkill -f 'java.*jar' || true
            
            # 잠시 대기 (프로세스가 완전히 종료될 시간)
            sleep 5
            
            # JAR 파일 실행 권한 부여
            chmod +x /home/ubuntu/*.jar
            
            # 환경 변수 설정 및 백그라운드에서 Spring Boot 애플리케이션 실행
            export SYSTEM_PROFILE="prod"
            export DB_URL="${{ secrets.DB_URL }}"
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export JPA_DDL_AUTO="${{ secrets.JPA_DDL_AUTO }}"
            export JPA_SHOW_SQL="${{ secrets.JPA_SHOW_SQL }}"
            export JPA_FORMAT_SQL="${{ secrets.JPA_FORMAT_SQL }}"
            export THYMELEAF_CACHE="${{ secrets.THYMELEAF_CACHE }}"
            export LOG_LEVEL="${{ secrets.LOG_LEVEL }}"
            export HIBERNATE_LOG_LEVEL="${{ secrets.HIBERNATE_LOG_LEVEL }}"
            export HIBERNATE_BINDING_LOG_LEVEL="${{ secrets.HIBERNATE_BINDING_LOG_LEVEL }}"
            export OAUTH_GITHUB_CLIENT_ID="${{ secrets.OAUTH_GITHUB_CLIENT_ID }}"
            export OAUTH_GITHUB_CLIENT_SECRET="${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}"
            export OAUTH_GITHUB_REDIRECT_URI="${{ secrets.OAUTH_GITHUB_REDIRECT_URI }}"
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export GOOGLE_REDIRECT_URI="${{ secrets.GOOGLE_REDIRECT_URI }}"
            export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
            export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
            export KAKAO_REDIRECT_URI="${{ secrets.KAKAO_REDIRECT_URI }}"
            export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            export JWT_EXPIRE_LENGTH="${{ secrets.JWT_EXPIRE_LENGTH }}"
            export CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}"
            export CSRF_ENABLED="${{ secrets.CSRF_ENABLED }}"
            
            # 환경 변수 설정 확인 (값은 보안상 표시하지 않고 설정 여부만 확인)
            echo "=== 환경 변수 설정 확인 ==="
            echo "OAUTH_GITHUB_CLIENT_ID 설정됨: ${OAUTH_GITHUB_CLIENT_ID:+YES}"
            echo "OAUTH_GITHUB_CLIENT_SECRET 설정됨: ${OAUTH_GITHUB_CLIENT_SECRET:+YES}"
            echo "GOOGLE_CLIENT_ID 설정됨: ${GOOGLE_CLIENT_ID:+YES}"
            echo "GOOGLE_CLIENT_SECRET 설정됨: ${GOOGLE_CLIENT_SECRET:+YES}"
            echo "KAKAO_CLIENT_ID 설정됨: ${KAKAO_CLIENT_ID:+YES}"
            echo "KAKAO_CLIENT_SECRET 설정됨: ${KAKAO_CLIENT_SECRET:+YES}"
            echo "DB_URL 설정됨: ${DB_URL:+YES}"
            echo "============================"
            
            nohup java -jar -Ddebug=true /home/ubuntu/*.jar > /home/ubuntu/app.log 2>&1 &
            
            # 애플리케이션이 정상 시작되었는지 확인
            echo "애플리케이션 시작 대기 중..."
            sleep 15
            
            if pgrep -f 'java.*jar'; then
              echo "애플리케이션이 성공적으로 시작되었습니다."
              echo "프로세스 ID: $(pgrep -f 'java.*jar')"
            else
              echo "애플리케이션 시작에 실패했습니다."
              echo "로그 확인:"
              tail -20 /home/ubuntu/app.log
              exit 1
            fi